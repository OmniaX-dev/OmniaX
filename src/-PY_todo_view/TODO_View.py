import sys
import os
import re
from PyQt5 import QtWidgets, uic, QtGui, QtCore

from MyWindow import Ui_MainWindow
from numpy import indices
from PyQt5.Qt import QFont

if len(sys.argv) < 2:
    sys.exit(1)
base_directory = sys.argv[1]

icon_b64 = b""

def iconFromBase64(base64):
    pixmap = QtGui.QPixmap()
    pixmap.loadFromData(QtCore.QByteArray.fromBase64(base64))
    icon = QtGui.QIcon(pixmap)
    return icon

class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *args, obj=None, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)


app = QtWidgets.QApplication(sys.argv)

window = MainWindow()

def find_todos(path, base_path):
    file = open(path, 'r')
    lines = list(file)
    todos = []
    line_nr = 1
    for line in lines:
        i = line.find("TODO:")
        if i != -1:
            todos.append("\tLine " + str(line_nr) + ":\t\t" + line[i + 5:].strip())
        line_nr = line_nr + 1
    file.close()
    if todos:
        f = base_path[base_path.rfind("/"):]
        if base_path.strip().endswith("/"):
            base_path = base_path[:len(base_path) - 2]
        f = base_path[base_path.rfind("/"):]
        #indices = [m.start() for m in re.finditer('/', path)]
        todos.insert(0, ":" + path[len(base_path) - len(f) + 1:].strip());
    return todos

def fill_list(dir, todo_list, base_path):
    for entry in os.scandir(dir):
        if entry.is_dir(follow_symlinks=False):
            fill_list(entry.path, todo_list, base_path)
        elif entry.path.endswith(".cpp") or entry.path.endswith(".hpp"):
            todo_list.extend(find_todos(entry.path, base_path))

todoList = []
fill_list(base_directory, todoList, base_directory)

model = QtGui.QStandardItemModel()
window.listView.setModel(model)

j = 0
for i in todoList:
    item = QtGui.QStandardItem(i)
    if i.startswith(":"):
        item.setBackground(QtGui.QColor(40, 0, 0))
        item.setFont(QFont("Lucida Console", 12, QFont.Bold))
        item.setForeground(QtGui.QColor(170, 170, 170))
    else:
        item.setBackground(QtGui.QColor(0, 0, 0))
        item.setFont(QFont("Lucida Console", 12))
        item.setForeground(QtGui.QColor(50, 255, 50))
    j = j + 1
    model.appendRow(item)

window.setGeometry(100, 100, 1100, 500)
window.setWindowIcon(iconFromBase64(icon_b64))
window.showMaximized()
app.exec()